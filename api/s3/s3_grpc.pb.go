// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: s3.proto

package s3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S3Client is the client API for S3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3Client interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (S3_UploadClient, error)
}

type s3Client struct {
	cc grpc.ClientConnInterface
}

func NewS3Client(cc grpc.ClientConnInterface) S3Client {
	return &s3Client{cc}
}

func (c *s3Client) Upload(ctx context.Context, opts ...grpc.CallOption) (S3_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &S3_ServiceDesc.Streams[0], "/S3/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &s3UploadClient{stream}
	return x, nil
}

type S3_UploadClient interface {
	Send(*Object) error
	CloseAndRecv() (*ObjectInfo, error)
	grpc.ClientStream
}

type s3UploadClient struct {
	grpc.ClientStream
}

func (x *s3UploadClient) Send(m *Object) error {
	return x.ClientStream.SendMsg(m)
}

func (x *s3UploadClient) CloseAndRecv() (*ObjectInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ObjectInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// S3Server is the server API for S3 service.
// All implementations must embed UnimplementedS3Server
// for forward compatibility
type S3Server interface {
	Upload(S3_UploadServer) error
	mustEmbedUnimplementedS3Server()
}

// UnimplementedS3Server must be embedded to have forward compatible implementations.
type UnimplementedS3Server struct {
}

func (UnimplementedS3Server) Upload(S3_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedS3Server) mustEmbedUnimplementedS3Server() {}

// UnsafeS3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3Server will
// result in compilation errors.
type UnsafeS3Server interface {
	mustEmbedUnimplementedS3Server()
}

func RegisterS3Server(s grpc.ServiceRegistrar, srv S3Server) {
	s.RegisterService(&S3_ServiceDesc, srv)
}

func _S3_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(S3Server).Upload(&s3UploadServer{stream})
}

type S3_UploadServer interface {
	SendAndClose(*ObjectInfo) error
	Recv() (*Object, error)
	grpc.ServerStream
}

type s3UploadServer struct {
	grpc.ServerStream
}

func (x *s3UploadServer) SendAndClose(m *ObjectInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *s3UploadServer) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// S3_ServiceDesc is the grpc.ServiceDesc for S3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "S3",
	HandlerType: (*S3Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _S3_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "s3.proto",
}
