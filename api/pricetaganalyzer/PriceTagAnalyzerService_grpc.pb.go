// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: PriceTagAnalyzerService.proto

package pricetaganalyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceTagAnalyzerServiceClient is the client API for PriceTagAnalyzerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceTagAnalyzerServiceClient interface {
	AnalyzeImage(ctx context.Context, opts ...grpc.CallOption) (PriceTagAnalyzerService_AnalyzeImageClient, error)
}

type priceTagAnalyzerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceTagAnalyzerServiceClient(cc grpc.ClientConnInterface) PriceTagAnalyzerServiceClient {
	return &priceTagAnalyzerServiceClient{cc}
}

func (c *priceTagAnalyzerServiceClient) AnalyzeImage(ctx context.Context, opts ...grpc.CallOption) (PriceTagAnalyzerService_AnalyzeImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PriceTagAnalyzerService_ServiceDesc.Streams[0], "/PriceTagAnalyzerService/AnalyzeImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &priceTagAnalyzerServiceAnalyzeImageClient{stream}
	return x, nil
}

type PriceTagAnalyzerService_AnalyzeImageClient interface {
	Send(*ImageChunk) error
	CloseAndRecv() (*ImageInfo, error)
	grpc.ClientStream
}

type priceTagAnalyzerServiceAnalyzeImageClient struct {
	grpc.ClientStream
}

func (x *priceTagAnalyzerServiceAnalyzeImageClient) Send(m *ImageChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *priceTagAnalyzerServiceAnalyzeImageClient) CloseAndRecv() (*ImageInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceTagAnalyzerServiceServer is the server API for PriceTagAnalyzerService service.
// All implementations must embed UnimplementedPriceTagAnalyzerServiceServer
// for forward compatibility
type PriceTagAnalyzerServiceServer interface {
	AnalyzeImage(PriceTagAnalyzerService_AnalyzeImageServer) error
	mustEmbedUnimplementedPriceTagAnalyzerServiceServer()
}

// UnimplementedPriceTagAnalyzerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPriceTagAnalyzerServiceServer struct {
}

func (UnimplementedPriceTagAnalyzerServiceServer) AnalyzeImage(PriceTagAnalyzerService_AnalyzeImageServer) error {
	return status.Errorf(codes.Unimplemented, "method AnalyzeImage not implemented")
}
func (UnimplementedPriceTagAnalyzerServiceServer) mustEmbedUnimplementedPriceTagAnalyzerServiceServer() {
}

// UnsafePriceTagAnalyzerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceTagAnalyzerServiceServer will
// result in compilation errors.
type UnsafePriceTagAnalyzerServiceServer interface {
	mustEmbedUnimplementedPriceTagAnalyzerServiceServer()
}

func RegisterPriceTagAnalyzerServiceServer(s grpc.ServiceRegistrar, srv PriceTagAnalyzerServiceServer) {
	s.RegisterService(&PriceTagAnalyzerService_ServiceDesc, srv)
}

func _PriceTagAnalyzerService_AnalyzeImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PriceTagAnalyzerServiceServer).AnalyzeImage(&priceTagAnalyzerServiceAnalyzeImageServer{stream})
}

type PriceTagAnalyzerService_AnalyzeImageServer interface {
	SendAndClose(*ImageInfo) error
	Recv() (*ImageChunk, error)
	grpc.ServerStream
}

type priceTagAnalyzerServiceAnalyzeImageServer struct {
	grpc.ServerStream
}

func (x *priceTagAnalyzerServiceAnalyzeImageServer) SendAndClose(m *ImageInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *priceTagAnalyzerServiceAnalyzeImageServer) Recv() (*ImageChunk, error) {
	m := new(ImageChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PriceTagAnalyzerService_ServiceDesc is the grpc.ServiceDesc for PriceTagAnalyzerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceTagAnalyzerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PriceTagAnalyzerService",
	HandlerType: (*PriceTagAnalyzerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AnalyzeImage",
			Handler:       _PriceTagAnalyzerService_AnalyzeImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "PriceTagAnalyzerService.proto",
}
